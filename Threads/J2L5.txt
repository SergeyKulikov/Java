https://github.com/SergeyKulikov/Java/tree/master/Threads

В варианте J2L5 смотрел скорость расчета через потоки. Можно поиграться количеством потоков и посмотреть скорость расчета для каждого потока и общее затраченное время.

Thread-0 has started.
Thread-0 completed in 11680 msec.
Totally completed in 11694 msec.

Thread-1 has started.
Thread-2 has started.
Thread-3 has started.
Thread-4 has started.
Thread-5 has started.
Thread-6 has started.
Thread-7 has started.
Thread-8 has started.
Thread-2 completed in 988 msec.
Thread-1 completed in 1034 msec.
Thread-3 completed in 1347 msec.
Thread-6 completed in 1843 msec.
Thread-4 completed in 1865 msec.
Thread-5 completed in 1904 msec.
Thread-7 completed in 2440 msec.
Thread-8 completed in 3144 msec.
Totally completed in 3166 msec for 8 threads.

Threads work in 3,693620 times faster!
The values of the arrays are the same.


Во втором варианте J2L5_1 смотрел как меняется общая скорость расчета в зависимости от количества потоков. У меня скорость расчета начала падать после 250 потоков.

Totally completed in 8845 msec.

Totally completed in 1756 msec for 50 threads.
Threads work in 5,037016 times faster!
The values of the arrays are the same.

Totally completed in 1595 msec for 100 threads.
Threads work in 5,545455 times faster!
The values of the arrays are the same.

Totally completed in 1599 msec for 150 threads.
Threads work in 5,531582 times faster!
The values of the arrays are the same.

Totally completed in 1589 msec for 200 threads.
Threads work in 5,566394 times faster!
The values of the arrays are the same.

Totally completed in 1573 msec for 250 threads.
Threads work in 5,623013 times faster!
The values of the arrays are the same.

Totally completed in 1602 msec for 300 threads.
Threads work in 5,521224 times faster!
The values of the arrays are the same.

Totally completed in 1600 msec for 350 threads.
Threads work in 5,528125 times faster!
The values of the arrays are the same.

Totally completed in 1620 msec for 400 threads.
Threads work in 5,459877 times faster!
The values of the arrays are the same.

Totally completed in 1586 msec for 450 threads.
Threads work in 5,576923 times faster!
The values of the arrays are the same.

Totally completed in 1586 msec for 500 threads.
Threads work in 5,576923 times faster!
The values of the arrays are the same.

Totally completed in 1610 msec for 550 threads.
Threads work in 5,493789 times faster!
The values of the arrays are the same.

Totally completed in 1599 msec for 600 threads.
Threads work in 5,531582 times faster!
The values of the arrays are the same.

Totally completed in 1604 msec for 650 threads.
Threads work in 5,514339 times faster!
The values of the arrays are the same.

Totally completed in 1618 msec for 700 threads.
Threads work in 5,466626 times faster!
The values of the arrays are the same.

Totally completed in 1629 msec for 750 threads.
Threads work in 5,429711 times faster!
The values of the arrays are the same.

Totally completed in 1607 msec for 800 threads.
Threads work in 5,504045 times faster!
The values of the arrays are the same.

Totally completed in 1629 msec for 850 threads.
Threads work in 5,429711 times faster!
The values of the arrays are the same.

Totally completed in 1623 msec for 900 threads.
Threads work in 5,449784 times faster!
The values of the arrays are the same.

Totally completed in 1617 msec for 950 threads.
Threads work in 5,470006 times faster!
The values of the arrays are the same.

Totally completed in 1657 msec for 1000 threads.
Threads work in 5,337960 times faster!
The values of the arrays are the same.