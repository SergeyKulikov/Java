https://github.com/SergeyKulikov/Java/tree/master/Threads

В варианте J2L5 смотрел скорость расчета через потоки. Можно поиграться количеством потоков и посмотреть скорость расчета для каждого потока и общее затраченное время.

Thread-0 has started.
Thread-0 completed in 11680 msec.
Totally completed in 11694 msec.

Thread-1 has started.
Thread-2 has started.
Thread-3 has started.
Thread-4 has started.
Thread-5 has started.
Thread-6 has started.
Thread-7 has started.
Thread-8 has started.
Thread-2 completed in 988 msec.
Thread-1 completed in 1034 msec.
Thread-3 completed in 1347 msec.
Thread-6 completed in 1843 msec.
Thread-4 completed in 1865 msec.
Thread-5 completed in 1904 msec.
Thread-7 completed in 2440 msec.
Thread-8 completed in 3144 msec.
Totally completed in 3166 msec for 8 threads.

Threads work in 3,693620 times faster!
The values of the arrays are the same.


Во втором варианте J2L5_1 смотрел как меняется общая скорость расчета в зависимости от количества потоков. У меня скорость расчета начала падать после 250 потоков.

Totally completed in 8771 msec.



Totally completed in 1564 msec for 50 threads.
Threads work in 5,608056 times faster!
The values of the arrays are the same.

Totally completed in 1311 msec for 100 threads.
Threads work in 6,690313 times faster!
The values of the arrays are the same.

Totally completed in 1569 msec for 150 threads.
Threads work in 5,590185 times faster!
The values of the arrays are the same.

Totally completed in 1581 msec for 200 threads.
Threads work in 5,547755 times faster!
The values of the arrays are the same.

Totally completed in 1573 msec for 250 threads.
Threads work in 5,575970 times faster!
The values of the arrays are the same.

Totally completed in 1562 msec for 300 threads.
Threads work in 5,615237 times faster!
The values of the arrays are the same.

Totally completed in 1569 msec for 350 threads.
Threads work in 5,590185 times faster!
The values of the arrays are the same.

Totally completed in 1908 msec for 400 threads.
Threads work in 4,596960 times faster!
The values of the arrays are the same.

Totally completed in 1780 msec for 450 threads.
Threads work in 4,927528 times faster!
The values of the arrays are the same.

Totally completed in 1607 msec for 500 threads.
Threads work in 5,457996 times faster!
The values of the arrays are the same.

Totally completed in 1694 msec for 550 threads.
Threads work in 5,177686 times faster!
The values of the arrays are the same.

Totally completed in 1600 msec for 600 threads.
Threads work in 5,481875 times faster!
The values of the arrays are the same.

Totally completed in 1629 msec for 650 threads.
Threads work in 5,384285 times faster!
The values of the arrays are the same.

Totally completed in 1659 msec for 700 threads.
Threads work in 5,286920 times faster!
The values of the arrays are the same.

Totally completed in 1640 msec for 750 threads.
Threads work in 5,348171 times faster!
The values of the arrays are the same.

Totally completed in 1623 msec for 800 threads.
Threads work in 5,404190 times faster!
The values of the arrays are the same.

Totally completed in 1657 msec for 850 threads.
Threads work in 5,293301 times faster!
The values of the arrays are the same.

Totally completed in 1653 msec for 900 threads.
Threads work in 5,306110 times faster!
The values of the arrays are the same.

Totally completed in 1627 msec for 950 threads.
Threads work in 5,390903 times faster!
The values of the arrays are the same.

Totally completed in 1616 msec for 1000 threads.
Threads work in 5,427599 times faster!
The values of the arrays are the same.